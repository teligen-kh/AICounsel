# AICounsel 프로젝트 구조

## 📁 루트 디렉토리
```
AICounsel/
├── README.md                    # 프로젝트 개요
├── AICounsel_PRD.md            # 제품 요구사항 문서
├── DevelopmentProgress.txt     # 개발 진행 상황
├── ProjectStructure.txt        # 프로젝트 구조 (이 파일)
├── start_servers.bat           # 서버 시작 스크립트
└── .gitignore                  # Git 무시 파일
```

## 🖥️ 백엔드 (Backend)
```
backend/
├── app/                        # FastAPI 애플리케이션
│   ├── main.py                # 메인 애플리케이션
│   ├── config.py              # 설정
│   ├── database.py            # 데이터베이스 연결
│   ├── dependencies.py        # 의존성 주입
│   ├── api/                   # API 엔드포인트
│   │   ├── __init__.py
│   │   ├── analysis.py        # 분석 API
│   │   ├── chat.py           # 채팅 API
│   │   └── v1/               # API v1
│   │       ├── chat.py
│   │       └── knowledge.py
│   ├── core/                  # 핵심 모듈
│   │   ├── config.py
│   │   └── database.py
│   ├── models/                # 데이터 모델
│   ├── routers/               # 라우터
│   │   └── chat.py
│   ├── scripts/               # 스크립트
│   └── services/              # 서비스 레이어
│       ├── chat_service.py    # 채팅 서비스
│       ├── conversation_algorithm.py
│       ├── formatting_service.py
│       ├── llm_service.py     # LLM 서비스
│       ├── llm.py
│       ├── model_manager.py   # 모델 관리
│       └── mongodb_search_service.py
├── data/                      # 데이터 디렉토리
│   └── csv/
│       └── Counseling Training Data.csv  # FAQ 데이터
├── models/                    # 모델 파일
│   ├── Phi-3.5-mini-instruct-Q8_0.gguf
│   ├── llama-3.1-8b-instruct-Q4_K_M.gguf
│   └── llama-2-7b-chat.Q4_K_M.gguf
├── finetune_tool/             # 🆕 파인튜닝 도구
│   ├── README.md              # 파인튜닝 도구 사용법
│   ├── requirements.txt       # 파인튜닝 의존성
│   ├── config.py              # 파인튜닝 설정
│   ├── data_processor.py      # 데이터 전처리
│   ├── model_trainer.py       # 모델 훈련
│   ├── run_finetune_gui.py    # GUI 실행 스크립트
│   ├── gui/                   # GUI 모듈
│   │   └── main_window.py     # 메인 윈도우
│   └── test_tool/             # 테스트 도구
│       ├── model_tester.py    # 모델 테스트
│       └── run_model_test.py  # 테스트 실행
├── test_tool/                 # 🆕 모델 테스트 도구 (개발 컴퓨터용)
│   ├── model_tester.py        # 모델 테스트 클래스
│   └── run_model_test.py      # 테스트 실행 스크립트
├── venv/                      # 가상환경
└── [기타 테스트 파일들]
```

## 🎨 프론트엔드 (Frontend)
```
frontend/
├── package.json               # Node.js 의존성
├── next.config.mjs           # Next.js 설정
├── tailwind.config.ts        # Tailwind CSS 설정
├── tsconfig.json             # TypeScript 설정
├── public/                   # 정적 파일
├── src/
│   ├── app/                  # Next.js 13+ App Router
│   │   ├── layout.tsx        # 루트 레이아웃
│   │   ├── page.tsx          # 홈페이지
│   │   ├── globals.css       # 전역 스타일
│   │   ├── chat/             # 채팅 페이지
│   │   │   └── page.tsx
│   │   ├── analysis/         # 분석 페이지
│   │   │   └── page.tsx
│   │   └── list/             # 목록 페이지
│   │       └── page.tsx
│   ├── components/           # React 컴포넌트
│   │   ├── chat/             # 채팅 관련 컴포넌트
│   │   │   ├── ChatContainer.tsx
│   │   │   ├── ChatHeader.tsx
│   │   │   ├── ChatInput.tsx
│   │   │   ├── ChatInterface.tsx
│   │   │   ├── ChatMessage.tsx
│   │   │   ├── ChatMessageList.tsx
│   │   │   └── LoadingMessage.tsx
│   │   ├── Analysis/         # 분석 관련 컴포넌트
│   │   │   ├── AnalysisResults.tsx
│   │   │   └── DateRangePicker.tsx
│   │   ├── Navigation/       # 네비게이션
│   │   │   └── Navbar.tsx
│   │   ├── Navigation.tsx
│   │   └── ui/               # UI 컴포넌트
│   │       ├── button.tsx
│   │       ├── calendar.tsx
│   │       ├── card.tsx
│   │       ├── dialog.tsx
│   │       ├── input.tsx
│   │       ├── popover.tsx
│   │       └── table.tsx
│   ├── hooks/                # React Hooks
│   ├── layouts/              # 레이아웃 컴포넌트
│   │   └── MainLayout.tsx
│   ├── lib/                  # 유틸리티 라이브러리
│   │   └── utils.ts
│   ├── services/             # API 서비스
│   │   ├── api.ts
│   │   ├── chatService.ts
│   │   ├── chatService_backup.ts
│   │   └── chatService_new.ts
│   ├── store/                # 상태 관리
│   │   └── useChatStore.ts
│   ├── styles/               # 스타일
│   │   └── theme.ts
│   ├── types/                # TypeScript 타입
│   │   └── analysis.ts
│   └── utils/                # 유틸리티
```

## 🗄️ 데이터베이스
```
mongodb/                       # MongoDB 설치 디렉토리
├── bin/                      # MongoDB 바이너리
├── data/                     # 데이터 저장소
├── log/                      # 로그 파일
└── mongod.cfg               # MongoDB 설정
```

## 🛠️ 도구 및 스크립트
```
tools/                        # 개발 도구
start_servers.bat             # 서버 시작 스크립트
```

## 📊 분석 결과
```
backend/analysis_results/     # 분석 결과 파일
├── basic_stats.csv          # 기본 통계
├── conversation_analysis.png # 대화 분석 차트
└── keywords.csv             # 키워드 분석
```

## 🔧 주요 기능별 구조

### 1. 채팅 시스템
- **백엔드**: `backend/app/services/chat_service.py`
- **프론트엔드**: `frontend/src/components/chat/`
- **API**: `backend/app/api/v1/chat.py`

### 2. LLM 통합
- **모델 관리**: `backend/app/services/model_manager.py`
- **LLM 서비스**: `backend/app/services/llm_service.py`
- **모델 파일**: `backend/models/`

### 3. 데이터베이스
- **연결**: `backend/app/database.py`
- **검색**: `backend/app/services/mongodb_search_service.py`
- **데이터**: `backend/data/`

### 4. 🆕 파인튜닝 시스템
- **GUI 도구**: `backend/finetune_tool/gui/main_window.py`
- **데이터 처리**: `backend/finetune_tool/data_processor.py`
- **모델 훈련**: `backend/finetune_tool/model_trainer.py`
- **테스트 도구**: `backend/test_tool/model_tester.py`

## 🚀 실행 방법

### 1. 전체 시스템 실행
```bash
# 서버 시작
start_servers.bat

# 또는 수동으로
cd backend && uvicorn app.main:app --reload
cd frontend && npm run dev
```

### 2. 파인튜닝 실행 (GPU 컴퓨터)
```bash
cd backend/finetune_tool
python run_finetune_gui.py
```

### 3. 모델 테스트 (개발 컴퓨터)
```bash
cd backend/test_tool
python run_model_test.py --model_path [모델경로] --test_type interactive
```

## 📝 개발 노트

### 최근 추가된 기능
1. **파인튜닝 도구**: Phi-3.5 모델 상담사 특화 파인튜닝
2. **GUI 인터페이스**: 사용자 친화적인 파인튜닝 설정
3. **테스트 도구**: 파인튜닝된 모델 성능 평가
4. **클라우드 지원**: 향후 AWS/GCP/Azure GPU 서버 지원 예정

### 하드웨어 요구사항
- **파인튜닝**: GTX 1050 Ti 이상 (4GB+ VRAM)
- **테스트**: GPU 없어도 가능
- **운영**: GPU 없어도 가능 (CPU 추론)

### 데이터 구조
- **FAQ 데이터**: CSV 형식 (요청내용, 처리내용)
- **대화 데이터**: JSON 형식 (시간별 대화 기록)
- **파인튜닝 데이터**: HuggingFace Dataset 형식

## 🔄 워크플로우

### 현재 워크플로우
1. **데이터 수집**: FAQ CSV + 대화 데이터
2. **파인튜닝**: GPU 컴퓨터에서 GUI로 실행
3. **모델 전송**: 파일로 개발 컴퓨터로 이동
4. **테스트**: 개발 컴퓨터에서 성능 평가
5. **적용**: 기존 시스템에 통합

### 향후 클라우드 워크플로우
1. **데이터 업로드**: 클라우드 스토리지
2. **클라우드 파인튜닝**: AWS/GCP/Azure GPU
3. **모델 다운로드**: 로컬로 다운로드
4. **테스트 및 적용**: 기존과 동일 